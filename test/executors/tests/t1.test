(<bc>int 9)
(<bc>halt )

;^9$

; *** Some consing ***

(<bc>int 1)
(<bc>int 2)
(<bc>cons )
(<bc>cdr )
(<bc>halt )

;^2$

; *******

(<bc>int 1)
(<bc>int 2)
(<bc>cons )
(<bc>car )
(<bc>halt )

;^1$

; *** Basic closure ***

(<bc>closure 0 
  (<bc>check-vars 2)
  (<bc>car-local-push 1)
  (<bc>halt ))
(<bc>int 1)
(<bc>int 2)
(<bc>cons )
(<bc>apply 2)

;^1$

; *** if ***

(<bc>closure 0 
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>if
    (<bc>cdr-local-push 1)
    (<bc>halt))
  (<bc>halt))
(<bc>int 1)
(<bc>int 2)
(<bc>cons)
(<bc>apply 2)

;^2$

; ******

(<bc>closure 0 
  (<bc>check-vars 2)
  (<bc>if
    (<bc>cdr-local-push 1)
    (<bc>halt))
  (<bc>int 42)
  (<bc>halt))
(<bc>lit-nil)
(<bc>apply 2)

;^42$

; *** nested if ***

(<bc>lit-nil)
(<bc>if
  (<bc>lit-t)
  (<bc>if 
    (<bc>int 21)
    (<bc>halt)))
(<bc>int 42)
(<bc>halt)

;^42$

; *** if with a closure within ***

(<bc>lit-nil)
(<bc>if
  (<bc>closure 0
    (<bc>int 3)
    (<bc>halt))
  (<bc>apply 1))
(<bc>int 2)
(<bc>halt)

;^2$

; *** Closures that close something ***

(<bc>int 42)
(<bc>closure 1
  (<bc>check-vars 1)
  (<bc>closure-ref 0)
  (<bc>halt ))
(<bc>apply 1)

;^42$

; ***

(<bc>int 1)
(<bc>lit-nil )
(<bc>cons )
(<bc>int 2)
(<bc>closure 2
  (<bc>check-vars 1)
  (<bc>closure-ref 0)
  (<bc>car )
  (<bc>halt ))
(<bc>apply 1)

;^1$

; *** apply-invert-k

(<bc>closure 0
  (<bc>check-vars 3)
  (<bc>local 1)
  (<bc>local 2)
  (<bc>apply 2))
(<bc>lit-nil )
(<bc>int 42)
(<bc>closure 0
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>halt ))
(<bc>apply-invert-k 3)

;^42$

; *** apply-list

(<bc>closure 0
  (<bc>check-vars 5)
  (<bc>local 1)
  (<bc>local 3)
  (<bc>apply 2))
(<bc>closure 0
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>halt ))
(<bc>int 1)
(<bc>int 2)
(<bc>int 3)
(<bc>lit-nil )
(<bc>cons )
(<bc>cons )
(<bc>cons )
(<bc>apply-list )

;^2$

; *** continue

(<bc>closure 0
  (<bc>check-vars 3)
  (<bc>car-local-push 2)
  (<bc>continue ))
(<bc>closure 0
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>halt ))
(<bc>int 42)
(<bc>lit-nil )
(<bc>cons )
(<bc>apply 3)

;^42$

; *** continue-local

(<bc>closure 0
  (<bc>check-vars 4)
  (<bc>continue-local 3))
(<bc>closure 0
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>halt ))
(<bc>int 19)
(<bc>int 42)
(<bc>apply 4)

;^42$

; *** continue-on-clos

(<bc>closure 0
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>halt ))
(<bc>closure 1
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>continue-on-clos 0))
(<bc>int 42)
(<bc>apply 2)

;^42$

; *** halt-local-push

(<bc>closure 0
  (<bc>check-vars 4)
  (<bc>halt-local-push 2))
(<bc>int 1)
(<bc>int 2)
(<bc>int 3)
(<bc>apply 4)

;^2$

; *** halt-clos-push

(<bc>int 99)
(<bc>int 98)
(<bc>closure 2
  (<bc>check-vars 1)
  (<bc>halt-clos-push 1))
(<bc>apply 1)

;^98$

; *** k-closure

(<bc>closure 0
  (<bc>check-vars 3)
  (<bc>continue-local 2))
(<bc>k-closure 0
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>halt ))
(<bc>int 23)
(<bc>apply 3)

;^23$

; *** k-closure-recreate

(<bc>k-closure 0
  (<bc>check-vars 2)
  (<bc>int 23)
  (<bc>continue ))
(<bc>k-closure-recreate 0
  (<bc>check-vars 2)
  (<bc>local 1)
  (<bc>halt ))
(<bc>apply 2)

;^23$

; *** k-closure-reuse

(<bc>k-closure-reuse 0
  (<bc>int 42)
  (<bc>halt ))
(<bc>continue )

;^42$

; *** variadic

(<bc>closure 0
  (<bc>variadic 2)
  (<bc>car-local-push 2)
  (<bc>halt ))
(<bc>int 1)
(<bc>int 2)
(<bc>int 3)
(<bc>int 4)
(<bc>int 5)
(<bc>apply 6)

;^2$

; *** ccc

(<bc>k-closure 0
  (<bc>local 1)
  (<bc>halt))
(<bc>closure 0
  (<bc>check-vars 3)
  (<bc>int 23)
  (<bc>continue))
(<bc>ccc)

;^23$

; *** ccc with call to cc

(<bc>k-closure-reuse 0
  (<bc>local 1)
  (<bc>halt ))
(<bc>closure 0
  (<bc>check-vars 3)
  (<bc>local 2)
  (<bc>k-closure 0
    (<bc>halt))
  (<bc>int 12)
  (<bc>apply 2))
(<bc>ccc)

;^12$

; *** scar

(<bc>int 1)
(<bc>lit-t )
(<bc>cons )
(<bc>local 1)
(<bc>int 2)
(<bc>scar )
(<bc>car-local-push 1)
(<bc>halt )

;^2$

; *** scdr

(<bc>int 1)
(<bc>lit-t )
(<bc>cons )
(<bc>local 1)
(<bc>int 2)
(<bc>scdr )
(<bc>cdr-local-push 1)
(<bc>halt )

;^2$

; *** c-to-i

(<bc>char 90)
(<bc>c-to-i)
(<bc>halt)

;^90$

; *** (c-to-i (i-to-c 90))

(<bc>int 90)
(<bc>i-to-c)
(<bc>c-to-i)
(<bc>halt)

;^90$
