(<bc>int 0)
(<bc>global-set foo)
(<bc>int 1)
(<bc>global foo)
(<bc>i+)
(<bc>global-set foo)
(<bc>closure 0
  (<bc>check-vars 2)
  (<bc>global foo)
  (<bc>continue))
(<bc>k-closure 0
  (<bc>halt))
(<bc>apply 2)

;^1$

; **** assign a complex structure

(<bc>int 0)
(<bc>int 1)
(<bc>cons)
(<bc>global-set foo)
(<bc>closure 0
  (<bc>check-vars 2)
  (<bc>global foo)
  (<bc>int 2)
  (<bc>cons)
  (<bc>global-set foo)
  (<bc>closure 0
    (<bc>check-vars 2)
    (<bc>global foo)
    (<bc>car)
    (<bc>car)
    (<bc>continue))
  (<bc>local 1)
  (<bc>apply 2))
(<bc>k-closure 0
  (<bc>halt))
(<bc>apply 2)

;^0$

; *** unbounded

(<bc>sym s)
(<bc>bounded)
(<bc>halt)

;^nil$

; *** bounded

(<bc>int 1)
(<bc>global-set s)
(<bc>sym s)
(<bc>bounded)
(<bc>halt)

;^t$

; *** unbounded, then bounded

(<bc>sym s)
(<bc>bounded)
(<bc>if
  (<bc>int 2)
  (<bc>halt))
(<bc>lit-t)
(<bc>global-set s)
(<bc>sym s)
(<bc>bounded)
(<bc>if
  (<bc>int 11)
  (<bc>halt))
(<bc>int 1)
(<bc>halt)

;^11$
