; macro expansion

(in-package compiler)
(using <hl>v0)

; recursively macroexpands code
(def macex (e)
  (if (atom e) 
    e
    (let op (car e)
      (if 
        (is op '<axiom>lambda)
          `(<axiom>lambda ,(cadr e) ,@(map macex (cddr e)))
        (is op '<axiom>quote)
          e
        (and (isa op 'sym)
             (bound op)
             (isa (<axiom>symeval op) '<hl>mac))
          ; we have a macro
          (let expander (rep (<axiom>symeval op))
            ; macros receives different args in hl and hl-arc-f
            (if bootstrap*
              (macex (apply expander (cdr e)))
              (macex (apply expander (table) (cdr e)))))
        ; a list
        (map macex e)))))
