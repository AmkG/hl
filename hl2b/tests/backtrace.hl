 (<axiom>set >start-host-eval nil)
(<axiom>set >stop-host-eval t)

; basic stuff

(<axiom>set list (<axiom>lambda l l))

(<axiom>set mac
  (<axiom>tag (<axiom>quote <hl>mac)
    (<axiom>lambda (name args . body)
      (list (<axiom>quote <axiom>set) name 
        (list (<axiom>quote <axiom>tag) (<axiom>quote (<axiom>quote <hl>mac))
          (<axiom>cons (<axiom>quote <axiom>lambda) 
                       (<axiom>cons args body)))))))

(mac def (name args . body)
  (list (<axiom>quote <axiom>set) name
    (<axiom>cons (<axiom>quote <axiom>lambda) (<axiom>cons args body))))

; define a few functions

(def + (x y)
  (<axiom>i+ x y))

(def g (x)
  (+ (+ 3 4) (+ 6 (+ x k)))) ; error here

(def f (y)
  (+ (g y) 1))

(def h (j)
  (+ (+ 1 2) (+ (f j) (f 0))))

(def rec (n)
  (<axiom>if (<axiom>is n 0)
    k ; error here
    (+ 1 (rec (+ n -1)))))

(def r-1 (n)
  (+ 1 (r-2 (+ n -1))))

(def r-2 (n)
  (<axiom>if (<axiom>is n 0)
    k ; error here
    (r-1 n)))

(def map1 (f l)
  (<axiom>if l (<axiom>cons (f (<axiom>car l)) (map1 f (<axiom>cdr l)))))

(def a (n)
  (+ n 2)
  (h (list 1 2))
  (g 2))

(def info-from-bt (bt)
  (map1 (<axiom>lambda (info)
          (<axiom>cons
            (<axiom>debug-bytecode-info 
              (<axiom>car (<axiom>disclose (<axiom>car info))))
            (<axiom>cdr info)))
        bt))

(def my-handler (msg bt)
  (<axiom>cons msg (info-from-bt bt)))

(def fail ()
  (<axiom>cons "Failure" (info-from-bt (<axiom>debug-backtrace))))

(def will-fail (n)
  (<axiom>if (<axiom>is n 0)
    (fail)
    (will-fail (<axiom>i- n 1))))

>stop-host-eval

(<axiom>err-handler-set my-handler)

; uncomment one of the following to get an error

;(a 10)
;(h 10)
;(rec 3)
;(r-2 20)
(will-fail 6)
