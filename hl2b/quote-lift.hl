; quote-lift.arc
; by AmkG
; mods by Stefano
; converts the form:
;   (foo 'bar)
; to:
;   (let quoted 'bar (foo quoted))

(in-package compiler)
(using <hl>v0)

; traverse ast, looking for quote expressions
; if it's more expensive to create and refer to a local var than to directly
; create the constant, then it is not collected
; return a table associating ast nodes to vars
(def quote-complex-collect (ast)
  (let tb (table)
    (trav+ (go ast) ast
      (when (and (aquote ast) (~simple-const-expr? ast!val))
        (= tb.ast (new-var 'quoted)))
      (each s ast!subx (go s)))
    tb))

; return a list of two lists
; the first list holds all the keys, the second all the values
(def table-key-value-lists (tb)
  (let (keys vals) nil
    (ontable key val tb
      (push key keys)
      (push val vals))
    (list keys vals)))

(set const-expanders* (table))

; define an expander for a certain constant type
(mac def-const-expander (ast-type val-arg-name . body)
  `(= (const-expanders* ',ast-type) (fn (,val-arg-name) ,@body)))

; take a constant expression
; return quote-free code (an ast) that builds the constant
(def const-expand (val)
  (aif (const-expanders* (type val))
    (it val)
    (err:string "Don't know how to build quoted expression " val)))

; simple types: 
(def-const-expander sym s (make-lit '() s))
(def-const-expander int i (make-lit '() i))
(def-const-expander bool b (make-lit '() b))

; complex types
(def-const-expander cons val
  (make-prim (list (const-expand:car val) (const-expand:cdr val)) '%cons))

(def quote-lift (ast)
  (givens ctb (quote-complex-collect ast)
          (arguments params) (table-key-value-lists ctb)
          arguments (map [const-expand _!val] arguments)
          transform
          (fn (ast)
            (make-app
              (cons (make-lam
                      (list
                        ((afn (ast)
                           (aif ctb.ast
                             (make-ref () it)
                             (if (aquote ast)
                               ; not collected quote
                               (const-expand ast!val)
                               (do (zap [map self _] ast!subx)
                                    ast))))
                         ast))
                      params)
                    arguments)))
    (transform ast)))
