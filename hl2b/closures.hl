(in-package compiler)
(using <hl>v0)

;------------------------------------------------------------------------------
; closure conversion

(def convert (ast self-var free-vars)
  (let cc (rfn cc (ast)
    (if
      (or (alit ast) (aquote ast))
        ast
      (aref ast)
        (aif (pos ast!var free-vars)
          (make-prim (list (make-ref '() self-var) (make-lit '() (+ it 1))) '<axiom>closure-ref)
          ast)
      (aset ast)
        (make-set (map cc ast!subx) ast!var)
      (acnd ast)
        (make-cnd (map cc ast!subx))
      (aprim ast)
        (make-prim (map cc ast!subx) ast!op)
      (anapp ast)
        (with
          (fun (car ast!subx)
           args (map cc (cdr ast!subx)))
          (if (alam fun)
            (make-app:cons
              (with (sub (list:cc (car fun!subx))
                     par fun!params)
                (if fun!continuation 
                  (make-cont sub par)
                  (make-lam sub par fun!dbg)))
              args)
            (let f (cc fun)
              (make-app:cons (make-prim (list f (make-lit '() 0)) '<axiom>closure-ref) (cons f args)))))
      (alam ast)
        (with
          (new-free-vars (keep [~aglobal _] (fv ast))
           new-self-var (new-var 'self))
          (make-prim
            (cons
              (with (sub (list:convert (car ast!subx) 
                                       new-self-var new-free-vars)
                     par (cons new-self-var ast!params))
                (if ast!continuation 
                  (make-cont sub par)
                  (make-lam sub par ast!dbg)))
              (map [cc (make-ref '() _)] new-free-vars))
            '<axiom>closure))
      (aseq ast) ; Impossible after CPS
        (make-seq (map cc ast!subx))
        (err "unknown ast" ast)))

    (cc ast)))

(def closure-convert (ast top-k-var)
  (make-lam (list (convert ast nil '())) (list (new-var 'self) top-k-var) 
            (table)))

