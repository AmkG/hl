; Some working examples of hl code
; to run:
; $ hl compiler.arc examples.hl

; these two are temporarily needed
(<axiom>set >start-host-eval nil)
(<axiom>set >stop-host-eval t)

; basic stuff

(<axiom>set list (<axiom>lambda l l))

(<axiom>set mac
  (<axiom>tag (<axiom>quote <hl>mac)
    (<axiom>lambda (name args . body)
      (list (<axiom>quote <axiom>set) name 
        (list (<axiom>quote <axiom>tag) (<axiom>quote (<axiom>quote <hl>mac))
          (<axiom>cons (<axiom>quote <axiom>lambda) 
                       (<axiom>cons args body)))))))

(mac def (name args . body)
  (list (<axiom>quote <axiom>set) name
    (<axiom>cons (<axiom>quote <axiom>lambda) (<axiom>cons args body))))

(def no (x) (<axiom>if x nil t))

; good old Fibonacci

(def fib (n)
  (<axiom>if (<axiom>i< n 2)
    1
    (<axiom>i+ (fib (<axiom>i- n 1)) (fib (<axiom>i- n 2)))))

(fib 5)

; counters

(def mk-count (x)
  (<axiom>lambda () (<axiom>set x (<axiom>i+ x 1))))
(<axiom>set c1 (mk-count 9))
(<axiom>set c2 (mk-count 3))
(c1)
(c2)
(c1)
(c2)

; a little consing

(def build (n) 
  (<axiom>if (<axiom>is n 0) 
    nil 
    (<axiom>cons n (build (<axiom>i- n 1)))))

(def last (l)
  (<axiom>if (no (<axiom>cdr l))
    (<axiom>car l)
    (last (<axiom>cdr l))))

(last (build 1000))

; uncomment to stress the GC a little
; (build 1000000)

; let (no destructuring)

(mac let (var val . body)
  (list (<axiom>cons (<axiom>quote <axiom>lambda) 
                     (<axiom>cons (list var) body)) val))

(<axiom>set x 99)

(let x (<axiom>i+ 4 5)
  (<axiom>set x (<axiom>i+ x 1))
  (<axiom>set x (<axiom>i* x 10))
  x)

; time to spawn some processes
; hl-arc-f has no processes, so we have to stop evaluation

(<axiom>set res t)

>stop-host-eval

; definitions of recv/spawn/send

(def recv ()
  (<axiom>recv))

(<axiom>set spawn-cont-code* 
            (<axiom>assemble
              (list (list (<axiom>quote <bc>check-vars) 1)
                    (list (<axiom>quote <bc>closure-ref) 0)
                    (list (<axiom>quote <bc>k-closure) 0 
                      (list (<axiom>quote <bc>check-vars) 2) 
                      (list (<axiom>quote <bc>halt)))
                    (list (<axiom>quote <bc>apply) 2))))

(def spawn (f)
  ; <axiom>enclose is still to fix
  (<axiom>spawn (<axiom>enclose f spawn-cont-code*)))

(def send (to x)
  (<axiom>send to x))

; spawn a process, send it our pid and receive a value

(let pid (spawn (<axiom>lambda () (send (recv) 42)))
  (send pid (<axiom>self-pid))
  (<axiom>set res (recv)))

>start-host-eval

res

; Hello, World!

; map over a string, return a list
(def mapstr (f s i)
  (<axiom>if (<axiom>i< i (<axiom>string-length s))
    (<axiom>cons (f (<axiom>string-ref s i)) (mapstr f s (<axiom>i+ i 1)))
    nil))

(def id (x) x)

>stop-host-eval

(let o (<axiom>i/o-stdout)
  (<axiom>i/o-write (<axiom>self-pid) o (<axiom>l-to-b (mapstr id "Hello, World!\n" 0))))

>start-host-eval

; read some chars until eof

(mac afn (args . body)
  (list (<axiom>quote let) (<axiom>quote self) nil
    (list (<axiom>quote <axiom>set) (<axiom>quote self)
      (<axiom>cons (<axiom>quote <axiom>lambda) (<axiom>cons args body)))))

(mac do body
  (list 
    (<axiom>cons (<axiom>quote <axiom>lambda) (<axiom>cons nil body))))

>stop-host-eval

(let i (<axiom>i/o-stdin)
  (let o (<axiom>i/o-stdout)
    ((afn ()
       (let c (<axiom>b-ref (<axiom>i/o-read (<axiom>self-pid) i 1) 0)
         (<axiom>if c
           (do
             (<axiom>i/o-write (<axiom>self-pid) o c)
             (self))))))))

>start-host-eval
