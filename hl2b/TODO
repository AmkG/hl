The following functions/macros must be implemented in order to
bootstrap hl2b. They're shown together with their dependencies on the
right. The type (function or macro) is shown on the left together
with its current status (implemented/not implemented).

codes:
  a - implemented in the Arc-F bootstrap as part of the <hl> package,
      and correctly targets peculiarities of the hl virtual machine
      that are absent in Arc-F, but potentially with limitations.
  A - implemented in the Arc-F bootstrap as part of the <hl> package,
      correctly targets differences in hl and Arc-F, but works *enough*
      as expected for compiling the compiler.
  * - A above, plus implemented in the cs/ bootstrap as well, as part
      of <hl>.

The minimum to bootstrap hl is to fill this with A's for macros, and
*'s for functions.

- [m][a] def -- fn do
- [m][A] do
- [m][a] mac -- fn do
- [m][A] if
- [m][ ] and -- if
- [m][ ] or -- if
- [f][*] no
- [m][A] each -- w/uniq let maptable afn alist when isa for
- [f][ ] load -- w/infile w/uniq whiler read eval
- [f][*] string
- [f][ ] unpkg
- [m][a] = -- ; depends if it has to be supported completely
- [m][ ] w/infile -- infile after close
- [m][a] let -- fn
- [m][a] with -- fn map
- [m][a] withs -- fn let
- [m][a] fn -- sort of; we just use <axiom>lambda
- [m][ ] afn -- fn
- [f][ ] require -- load
- [m][ ] w/uniq -- uniq
- [f][*] uniq -- but we use tagged objects instead of true symbols in hl
- [f][ ] coerce
- [f][ ] +
- [m][ ] push -- w/uniq let atwiths setforms
- [f][ ] listtab -- let map fn
- [m][ ] givens -- withs
- [m][ ] make-br-fn
- [m][ ] ++ -- isa w/uniq let atwiths setforms
- [f][ ] acons
- [f][ ] ssyntax
- [f][ ] isnt -- no is
- [f][ ] caris -- and acons is
- [m][ ] in -- let or w/uniq
- [f][ ] type
- [f][ ] isa -- is type
- [f][ ] alist -- type
- [f][*] err - builtin?
- [f][ ] is
- [f][*] car
- [f][ ] cons
- [f][*] cdr
- [f][*] map1
- [f][*] map -- map1
- [f][ ] orf -- some
- [m][ ] awhen -- when
- [m][ ] do
- [m][ ] trav+ -- rfn when
- [m][ ] when
- [m][ ] ontable -- maptable
- [f][ ] list
- [m][ ] aif -- if
- [m][ ] zap -- with afn map atwiths setforms
- [m][ ] rfn -- fn
- [f][ ] pos
- [f][ ] complement -- compose no
- [f][ ] dotted -- atom and or
- [f][ ] len
- [m][ ] on
- [f][ ] copy -- forlen ontable newstring map
- [f][ ] mappend -- join-inner map
- [f][ ] cadr -- car cdr
- [f][ ] cddr -- cdr
- [f][ ] len> -- len >
- [f][ ] some -- testify
- [m][ ] given -- let
- [m][ ] case -- caselet
- [f][ ] >=
- [f][ ] >
- [f][ ] keep
- [f][ ] idfn
- [f][ ] rev
- [f][ ] -
- [f][ ] mem
- [f][ ] max -- best
- [m][ ] mapeach -- map1
- [f][ ] atom
- [f][ ] bound
- [f][ ] rep
