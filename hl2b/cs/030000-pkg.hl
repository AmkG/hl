; implementation of packages, ported from the scheme version in hl-arc-f

;; some definitions to be able to test on hl-arc-f
;; only for testing purposes, work in the <User> package

;(in-package impl)
;(using <hl>v1)

(import <User>def def)
(import <arc>annotate tag)
(import <arc>ssyntax ssyntax)
(import <arc>ssexpand ssexpand)

(mac def ((name . args) . body)
  `(<arc>def ,name ,args ,@body)) 

(def (is-no-pkg x y)
  (is x (<arc>unpkg y)))

(def (caddr x)
  (car (cddr x)))

; NOTES:
; be very careful of the separation between
; <hl> and <common> .  <common> cannot be
; sent across machines.  <hl> can.  This
; usually means that <hl> must be wrappers
; that call <common>, because <common> must
; be provided by all machines.
;
; (def (<common>foo x)
;            ; implementation specific, so cannot
;            ; be sent across machines.
;   (let foo (<impl>foo)
;     foo))
; (def (<hl>foo x)
;   ; call the implementation-specific
;   ; function; all implementations should
;   ; have it, but its contents will vary
;   ; across implementations.
;   (<common>foo x))

; Differences in emitted code:
;
;  input                     arc-f output                        hl output
; (in-package foo)                t                                  t
; (using <foo>foo)                t                        (<hl>require "foo.hl")
; (interface <foo>bar nitz)       t           (<hl>add-interface "foo" "bar" (list <foo>nitz))
; (import <foo>bar nitz)          t                                  t
;
; in order to improve arc-compatibility in cs/ files, should probably
; just use (in-package) and (import)

(def (asym x) (isa x 'sym))

; create a new empty package
(def (pkg-new name)
  ; UNRELIABLE.  Each process gets
  ; its own copy of the package.
  ; I suggest using a process instead
  ; of a plain tagged data structure.
  (tag 'pkg (list 
              (table) ; mapping: unpackaged symbol -> symbol 
              (table) ; mapping: packaged interface symbol -> 
                      ;          list of interface members
              name)))

(def (apkg x)
  (isa x 'pkg))

(def (pkg-name pkg)
  ((rep pkg) 2))

; mapping: package name symbol -> package object
; UNRELIABLE.  Each process gets its own copy
; of the table.  I suggest using a process
; instead of a global variable.
(= pkgs* (table))

; t if s is a symbol with explicit package name
(def (pkg-sym s)
  (and (asym s)
       (pkg-str (string s))))

(def (pkg-str s)
  (and (> (len s) 2)
       (is (s 0) #\<)
       (find #\> (cut s 1))))

; get symbol without package
(def (unpkg s)
  (if (pkg-sym s)
    (cut s (+ (find #\> s) 1))
    s))

; get package name of symbol
(def (pkg-of s)
  (if (pkg-sym s)
    (cut s 1 (find #\> s))))

(def (canonicalize-sym s)
  (withs (ss (string s)
          pm (pkg-str ss))
    (if pm
      ; check package
      (with (pak (pkg-of s)
             no-pkg (unpkg s))
        (if (in no-pkg t nil) s
            (is pak (sym "")) no-pkg ; <>x == x, except for <>t and <>nil
            s))
      ; no special markings
      s)))

(def (canonicalize-all ex)
  (if
    (asym ex) (canonicalize-sym ex)
    (acons ex) (cons (canonicalize-all (car ex))
                     (canonicalize-all (cdr ex)))
    ex))

(def (the-pkg s)
  (if (isa s 'string)
    (if (or (pkg-str s) (find #\> s))
      nil
      (or (pkgs* (sym s))
          (let pak (pkg-new s)
            (= (pkgs* (sym s)) pak))))
    nil))

(def (pkg-ref pak s)
  (if (asym s)
    (if (pkg-sym s)
      s
      (let tb ((rep pak) 1)
        (or (tb s)
            (= (tb s) (sym (string #\< (pkg-name pak) #\> s))))))
    s))

(def (pkg-sref pak packaged unpackaged)
  (= (((rep pak) 1) unpackaged) packaged))

(def (iface-of-pkg pak s)
  ((iface-tbl-of-pkg pak) s))

(def (iface-tbl-of-pkg pak)
  ((rep pak) 2))

(def (iface-lookup s)
  (iface-of-pkg (the-pkg (pkg-of s)) s))

; NOTE: contexts in hl need to keep track of
; more than just the package.  In addition,
; there is no facility to change the representation
; of a tagged type - the tagged type is not mutable
; by deliberate design choice.
(def (mk-ctx)
  (tag '<hl>ctx
    (table
      '<hl>cur-pkg (the-pkg "User"))))

(def (actx x) (isa x '<hl>ctx))

;(def (actx x) nil)

;(defm (actx (t x <hl>actx))
;  t)

(def (pkg-of-ctx ctx)
  ((rep ctx) '<hl>cur-pkg))

(def (pkg-of-ctx-set ctx pkg)
  (= ((rep ctx) '<hl>cur-pkg) pkg))

(def (ctx-ref-reuse ctx ex)
  (if (acons ex)
    (if (ctx-meta (car ex))
      (ctx-ref ctx ex)
      (do 
        (= (car ex) (ctx-ref-reuse-inner ctx (car ex)))
        (= (cdr ex) (ctx-ref-reuse-inner ctx (cdr ex)))
        ex))
    (ctx-ref-reuse-inner ctx ex)))

(def (ctx-ref-reuse-inner ctx ex)
  (if 
    (asym ex)
      (if (ssyntax ex)
        (ctx-ref-reuse-inner ctx (ssexpand ex)) ; ??
        (pkg-ref (pkf-of-ctx ctx) ex))
    (acons ex)
      (do 
        (= (car ex) (ctx-ref-reuse-inner ctx (car ex)))
        (= (cdr ex) (ctx-ref-reuse-inner ctx (cdr ex)))
        ex)
    ex))

(def (ctx-meta head)
  (in head 'in-package 'using 'import 'interface))

(def (ctx-meta-compile ctx expr)
  (let head (car expr)
    (case head
      in-package t
      using `(let ctx (mk-ctx)
               (ctx-ref ctx '(in-package ,(sym (pkg-name (pkg-of-ctx ctx)))))
               (ctx-ref ctx '(using ,(cadr expr)))
               t)
      interface (withs (pak (pkg-of-ctx ctx)
                        parms (map [if (acons _) 
                                     (map [pkg-ref pak _] _)
                                     (pkg-ref pkg a)]
                                   (cdr expr)))
                  `(let ctx (mk-ctx)
                     (ctx-ref ctx ,@parms)))
      import `(pkg-sref (the-pkg ,(pkg-name (pkg-of-ctx ctx))) ,(cdr expr)))))

(mac no-pkg-case (x . args)
  (w/uniq tst
    `(let ,tst ,x
       (if
         ,@((afn (args)
              (if args
                (if (is (car args) t)
                  `(,(cadr args))
                  `((is-no-pkg ,tst ',(car args)) ,(cadr args)
                    ,@(self (cddr args))))))
             args)))))

(def (ctx-ref ctx ex)
  (if
    (acons ex)
      (let head (car ex)
        (no-pkg-case head
          in-package
            (do
              ; syntax check
              (when (no (acons (cdr ex)))
                (err "'in-package expects one parameter"))
              (when (cddr ex)
                (err "'in-package expects at most one parameter"))
              (when (or (no (asym (cadr ex)))
                        (pkg-sym (cadr ex)))
                (err "'in-package expects an unpackaged symbol"))
              (let pkg-str (string (cadr ex))
                (pkg-of-ctx-set ctx (the-pkg pkg-str))
                t))
          using
            (do
              (when (no (is (len ex) 2))
                (err "'using expects one argument"))
              (when (or (no (asym (cadr ex)))
                        (no (pkg-sym (cadr ex))))
                (err "'using expects a packaged symbol"))
              (withs (sym (cadr ex)
                      ss (string sym)
                      pak (pkg-of sym)
                      pak-file pak
                      pkg (the-pkg sym)
                      int-list (iface-of-pkg pkg sym))
                ; if package interface doesn't exist, try
                ; 'require-ing it.
                (when (no int-list)
                  (require (string pak-file ".arc"))
                  (= int-list (iface-of-pkg pkg sym)))
                (when (no int-list)
                  (err (string "Package interface does not exist: " ss)))
                (let dest-pkg (pkg-of-ctx ctx)
                  (each i int-list
                    (pkg-sref dest-pkg i (unpkg i))))
                t))
          import
            (do
              (if (no (is (len ex) 3))
                (err "'import expects two parameters"))
              (if (no (pkg-sym (cadr ex)))
                (err "first parameter to 'import should be packaged symbol"))
              (if (pkg-sym (caddr ex))
                (err "second parameter to 'import should be unpackaged symbol"))
              (pkg-sref (pkg-of-ctx ctx) (cadr ex) (caddr ex))
              t)
          interface
            (withs (dest-pkg (pkg-of-ctx ctx)
                    iface nil
                    int-tl nil
                    add-int (fn (np)
                              (if (no iface)
                                (= iface (list np) int-tl iface)
                                (= (cdr int-tl) (list np) int-tl (cdr int-tl))))
                    remove (fn (np)
                             (let tmp iface
                               (= iface nil int-tl nil)
                               (each e tmp
                                 (let sym (pkg-ref dest-pkg e)
                                   (if (no (find sym np))
                                     (add-int sym))))))
                    int-name (if (and (acons (cdr ex)) (asym (cadr ex)))
                               (pkg-ref dest-pkg (cadr ex))
                               (err "'interface expects a symbol for interface name"))
                    params (map (fn (p)
                                  (if (and (no (asym p)) (no (acons p)))
                                    (err "'interface expects a list of symbols or removed symbols"))
                                  (if (acons p)
                                    (map (fn (p)
                                           (if (no (asym p))
                                             (err "'interface expects symbols in removed list"))
                                           (pkg-ref dest-pkg p))
                                         p)
                                    (pkg-ref dest-pkg p)))
                                (cddr ex))
                    int-table (iface-tbl-of-pkg (the-pkg (pkg-of int-name))))
              (each p params
                (if (acons p)
                  (remove p)
                  (withs (sym (pkg-ref dest-pkg p)
                          int (iface-lookup sym))
                    (if int
                      (each e int (add-int e))
                      (add-int sym)))))
              (= (int-table int-name) iface)
              t)
          t ;; default
            (map [ctx-ref-inner ctx _] ex)))
    (ctx-ref-inner ctx ex)))

(def (ctx-ref-inner ctx x)
  (if
    (asym x)
      (if (ssyntax x)
        (ctx-ref-reuse-inner ctx (ssexpand x))
        (pkg-ref (pkg-of-ctx ctx) x))
    (acons x)
      (cons
        (ctx-ref-inner ctx (car x))
        (ctx-ref-inner ctx (cdr x)))
    t x))

; create a new context and process lst
; warning: modifies lst
(def (process-in-new-ctx lst)
  (let ctx (mk-ctx)
    (map [ctx-ref ctx _] lst)))

; testing

(def (check x what)
  (if x 'ok (err (string "failed: " what))))

(def (test-pkg)
  (map 
    [check (iso (process-in-new-ctx (read (instring (car _)))) (cadr _))
           (car _)]
    '(("((in-package k) l)" (t <k>l))
      ("((in-package k) l (in-package jk) (+ (p l)))" 
       (t <k>l t (<jk>+ (<jk>p <jk>l))))
      ("((in-package k) l (in-package jk) (import <k>l l) (+ (p l)))"
       (t <k>l t t (<jk>+ (<jk>p <k>l)))))))
