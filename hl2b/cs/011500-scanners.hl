
(in-package impl)

(import <hl>def def)
(import <hl>mac mac)
(import <hl>defm defm)
(import <hl>let let)
(import <hl>do do)
(import <hl>with with)
(import <hl>withs withs)

(import <hl>w/collect w/collect)
(import <hl>base-collect base-collect)
(import <hl>base-each base-each)
(import <hl>base-collect-on base-collect-on)

(import <hl>list list)
(import <hl>len len)
(import <hl>polymorph polymorph)

(import <hl>scanner scanner)
(import <hl>unscan unscan)
(import <hl>car car)
(import <hl>cdr cdr)
(import <hl>scar scar)
(import <hl>scdr scdr)

(import <hl>cons cons)
(import <hl>string string)
(import <hl>table table)
(import <hl>bool bool)
(import <hl>char char)

(import <axiom>if if)
(import <axiom>set =)
(import <axiom>lambda fn)
(import <axiom>i< <)
(import <axiom>i+ +)
(import <axiom>i- -)
(import <axiom>is is)

(import <axiom>rep rep)

(import <hl>err err)

(def (cons a b) (<axiom>cons a b))
(def (base-collect bf)
  (with (hd  nil
         tl  nil)
    (bf
      (fn (i)
        (if hd
            (= tl (<axiom>scdr tl (<axiom>cons i nil)))
            (= tl (= hd (<axiom>cons i nil))))
        i))
    hd))
(mac (w/collect . rest)
  ; `(symeval!base-collect (fn () ,@rest))
  ; =>
  ; `((symeval (quote base-collect)) (fn () ,@rest))
  (list
    (list '<axiom>symeval
          (list 'quote
                'base-collect))
    (<axiom>cons
      'fn
      (<axiom>cons '()
         rest))))

(def (scanner s)
  (err '<hl>type "can't convert to scanner sequence"))
; scanners
(defm (scanner (t s cons)) s)
(defm (scanner (t s bool)) s)
; sequences
(let table-loop nil
  (= table-loop
     (fn (rv tb ks)
       (if ks
           (let k (<axiom>car ks)
             (table-loop
               (<axiom>cons
                 (<axiom>cons k (<axiom>table-ref tb k))
                 rv)
               tb
               (<axiom>cdr ks)))
           rv)))
  (defm (scanner (t s table))
    (table-loop nil s (<axiom>table-keys s))))
(let string-loop nil
  (= string-loop
     ; in the future we might prefer to
     ; implement string pointers and use
     ; those.
     (fn (collect s i ln)
       (if (< i ln)
           (do (collect (<axiom>string-ref s i))
               (string-loop s (+ i 1) ln))
           ())))
  (defm (scanner (t s string))
    (base-collect
      (fn (collect)
        (string-loop s 0 (<axiom>string-length s))))))

(def (unscan s scan)
  (err '<hl>type "can't reconstitute from scanner sequence"))
; scanners
(defm (unscan (t s cons) scan) scan)
(defm (unscan (t s bool) scan) scan)
; sequences
(with (table-loop nil
       cons-check
       (polymorph
         (fn (c)
           (err '<hl>type "can't unscan non-cons-cells into tables"))
         '(cons)
         (fn (c) c)))
  (= table-loop
     (fn (rv ps)
       (if ps
           (withs (p   (cons-check (car ps))
                   k   (<axiom>car p)
                   v   (<axiom>cdr p))
             (<axiom>table-sref rv v k)
             (table-loop rv (cdr ps)))
           rv)))
  (defm (unscan (t s table))
    (table-loop (<axiom>table-create) s)))
(with (string-loop nil
       char-check
       (polymorph
         (fn (c)
           (err '<hl>type "can't unscan non-characters into string"))
         '(char)
         (fn (c) c)))
  (= string-loop
     (fn (rv i cs)
       (if cs
           (do (<axiom>string-sref rv (char-check (car cs)) i)
               (string-loop rv (+ i 1) (cdr cs)))
           rv)))
  (defm (unscan (t s string) scan)
    (withs (ln (len scan)
            rv (<axiom>string-build ln))
      (string-loop rv 0 scan))))

(def car
  (<axiom>accessor
    (fn (s)   (err '<hl>type "attempt to get 'car of non-scanner"))
    (fn (v s) (scar s v))))
(def cdr
  (<axiom>accessor
    (fn (s)   (err '<hl>type "attempt to get 'cdr of non-scanner"))
    (fn (v s) (scdr s v))))
; scanner
(defm (car (t s bool)) nil)
(defm (cdr (t s bool)) nil)
(defm (car (t s cons)) (if (is s (rep s)) (<axiom>car s) (err '<hl>type "attempt to get 'car of fake cons cell")))
(defm (cdr (t s cons)) (if (is s (rep s)) (<axiom>cdr s) (err '<hl>type "attempt to get 'cdr of fake cons cell")))

; redefinition of len
(let len-loop nil
  (= len-loop
     (fn (s n)
       (if s
           (len-loop (cdr s) (+ n 1))
           n)))
  (= len
     (fn (s)
       (len-loop (scanner s) 0))))
(defm (len (t s string))
  (<axiom>string-length s))
(defm (len (t s table))
  (len (<axiom>table-keys s)))
(defm (len (t s bool)) 0)

; sequence traversal
(with (each-loop nil
       skip-loop nil)
  (= each-loop
     (fn (seq bf)
       (if seq
           (if (bf (car seq))
               (each-loop (cdr seq) bf)
               ())
           ())))
  (= skip-loop
     (fn (seq skip bf)
       (if (< 0 skip)
           (skip-loop (cdr seq) (- skip 1) bf)
           (each-loop seq bf))))
  (def (base-each seq skip bf)
    (skip-loop (scanner seq) skip bf)))
; sequences
(let string-loop nil
  (= string-loop
     (fn (sp bf)
       (if (bf (<axiom>sp-ref sp))
           (if (<axiom>sp-adv sp)
               (string-loop sp bf)
               nil)
           nil)))
  (defm (base-each (t seq string) skip bf)
    (if (is (rep seq) seq)
        t
        (err '<hl>type "attempt to traverse fake string"))
    (let ln (<axiom>string-length seq)
      (if (is ln 0)
          nil
          (if (< skip ln)
              (string-loop (<axiom>string-pointer seq skip) bf)
              nil)))))
(with (table-loop nil
       skip-loop  nil)
  (= table-loop
     (fn (tb ks bf)
       (if ks
           (withs (k (<axiom>car ks)
                   v (<axiom>table-ref tb k))
             (if (bf (<axiom>cons k v))
                 (table-loop tb (<axiom>cdr ks) bf)
                 ()))
           ())))
  (= skip-loop
     (fn (tb ks skip bf)
       (if (< 0 skip)
           (skip-loop tb (<axiom>cdr ks) (- skip 1) bf)
           (table-loop tb ks bf))))
  (defm (base-each (t seq table) skip bf)
    (skip-loop seq (<axiom>table-keys seq) skip bf)))

; sequence re-creation
(def (base-collect-on seq bf)
  (unscan seq (base-collect bf)))
; sequence
(let char-check
     (polymorph
       (fn (c)
         (err '<hl>type "can't collect non-characters into string"))
       '(char)
       (fn (c) (if (is (rep c) c) c (err '<hl>type "attempt to collect fake character into string"))))
  (defm (base-collect-on (t seq string) bf)
    (let sb (<axiom>string-builder)
      (bf (fn (c)
            (<axiom>sb-add sb (char-check c))))
      (<axiom>sb-inner sb))))
(let cons-check
     (polymorph
       (fn (c)
         (err '<hl>type "can't collect non-cons-cell into table"))
       '(<hl>cons)
       (fn (c) (if (is (rep c) c) c (err '<hl>type "attempt to collect fake cons cell into table"))))
  (defm (base-collect-on (t seq table) bf)
    (let rv (<axiom>table-create)
      (bf
        (fn (c)
          (let c (cons-check c)
            (<axiom>table-sref rv (<axiom>car c) (<axiom>cdr c)))
          c))
      rv)))

(def (scar s v)
  (err '<hl>type "Unable to set car of " s))
(def (scdr s v)
  (err '<hl>type "Unable to set cdr of " s))
(defm (scar (t s cons) v)
  (if (is s (rep s))
      (<axiom>scar s v)
      (err '<hl>type "Attempt to set car of fake cons cell")))
(defm (scdr (t s cons) v)
  (if (is s (rep s))
      (<axiom>scdr s v)
      (err '<hl>type "Attempt to set cdr of fake cons cell")))

