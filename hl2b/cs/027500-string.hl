; conversion to string

(in-package impl)

(import <axiom>if if)
(import <axiom>is is)
(import <axiom>rep rep)

(import <hl>apply apply)
(import <hl>no no)

(import <hl>polymorph polymorph)

(import <hl>def def)
(import <hl>defm defm)
(import <hl>do do)
(import <hl>let let)
(import <hl>with with)
(import <hl>withs withs)
(import <hl>if if)
(import <hl>afn afn)
(import <hl>each each)
(import <hl>for for)
(import <hl>self self)

(import <hl>base-string base-string)
(import <hl>base-write base-write)
(import <hl>string string)

(def (base-string obj add-c add-s)
  ; use base-write
  (base-write obj add-c (fn () (add-c #\space)) (fn (ob) (base-string ob add-c add-s))))

(let old-base-string base-string
  (defm (base-string (t obj string) add-c add-s)
    (if (is obj (rep obj))
        (add-s obj)
        (old-base-string obj add-c add-s)))
  (defm (base-string (t obj <hl>char) add-c add-s)
    (if (is obj (rep obj))
        (add-c obj)
        (old-base-string obj add-c add-s)))
  (defm (base-string (t obj <hl>sym) add-c add-s)
    (if (is obj (rep obj))
        (add-s (<axiom>sy-to-s obj))
        (old-base-string obj add-c add-s))))

(with (add-c-sb
       (polymorph
         (fn (c sb)
           (err '<hl>contract "base-string attempted to add a non-character to string being built"))
         '(<hl>char)
         (fn (c sb)
           (if (is c (rep c))
               (<axiom>sb-add sb c)
               (err '<hl>contract "base-string attempted to add a fake character to string being built"))))
       add-s-sb
       (polymorph
         (fn (s sb)
           (err '<hl>contract "base-string attempt to add a non-string to string being built"))
         '(string)
         (fn (s sb)
           (if (is s (rep s))
               (<axiom>sb-add sb s)
               (err '<hl>contract "base-string attempted to add a fake string to string being built")))))
  (def (string . rest)
    (withs (sb    (<axiom>string-builder)
            add-c (fn (c) (add-c-sb c sb))
            add-s (fn (s) (add-s-sb s sb)))
      (each obj rest
        (base-string obj add-c add-s))
      (<axiom>sb-inner sb))))

