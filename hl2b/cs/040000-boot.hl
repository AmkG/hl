; utility functions necessary to run the compiler

(in-package impl)
(import <axiom>if if)
(import <axiom>lambda fn)
(import <axiom>is is)
(import <axiom>set =)
(import <axiom>tag tag)
(import <axiom>car car)
(import <axiom>cdr cdr)
(import <axiom>cons cons)
(import <axiom>i+ +)
(import <axiom>i/ /)
(import <axiom>i- -)
(import <axiom>imod imod)
(import <axiom>i< <)
(import <axiom>type type)
(import <axiom>table-sref table-sref)
(import <hl>mac mac)
(import <hl>def def)
(import <hl>table table)
(import <hl>let let)
(import <hl>string string)

(= list (fn args args))
(= cadr (fn (x) (car (cdr x))))

; mac
(= mac (tag 'mac
            (fn (name-and-args . body)
              (list '<axiom>set (car name-and-args)
                                (list 'tag 'mac
                                      (cons 'fn (cons (cons '<hl>macro-info (cdr name-and-args)) body)))))))

(mac (def name-and-args . body)
  ; TODO: use gvl
  (if (is (type name-and-args) '<hl>cons)
    (list '<axiom>set (car name-and-args)
                      (cons 'fn (cons (cdr name-and-args) body)))
    (list '<axiom>set name-and-args body)))

(def (isa x tp) (is (type x) tp))

(def (acons x) (isa x '<hl>cons))

(def (atom x) (no (acons x)))

(def (isnt a b) (no (is a b)))

(def (caris lst x) (is (car lst) x))

(def (alist x) (or (isa x 'nil) (isa x '<hl>cons)))

; coerce
; TODO: maybe use polymorphic 'defm instead of table based approach
; almkglor: I agree, mostly. my intent is that instead of 'coerce,
; we have a set of functions which mean "convert to specific type".
; i.e. instead of (coerce foo 'int) --> (int foo)

(let coerce-table (table)
  (def (coerce what into)
    (if (isa what into)
      what
      (let f (table-ref coerce-table (cons (type what) into))
        (if f
          (f what)
          (err (string "Can't coerce " what " into " into))))))

  (def (def-coerce a b f)
    (table-sref coerce-table (cons a b) f)))

(def-coerce 'char 'int (fn (_) (<axiom>c-to-i _)))
(def-coerce 'int 'char (fn (_) (<axiom>i-to-c _)))
(def-coerce 'char 'string string)
(def-coerce 'char 'sym (fn (_) (<axiom>s-to-sy (string _))))
(def-coerce 'int 'string string)
(def-coerce 'num 'string string)
(def-coerce 'string 'sym (fn (_) (<axiom>s-to-sy _)))
(def-coerce 'nil 'string (fn (x) ""))
(def-coerce 'symbol 'string string)

(let str-to-lst
     (fn (s)
       (<hl>base-collect-on ()
         (fn (collect)
           (<hl>each c s
             (collect c)))))
  (def-coerce 'string 'cons str-to-lst))

(let lst-to-str
     (fn (lst)
       (<common>apply-list
         string
         ; verifies that the lst is indeed a list
         (do (<hl>each i lst ())
             lst)))
  (def-coerce 'cons 'string lst-to-str))

; TODO: missing def-coerce for string -> int and string -> num

(def (maptable f tb)
  (map (fn (k) (f k (table-ref tb k))) (table-keys tb)))

; a lesser 'pos (no testify, no start) enough for the compiler
(def (pos x lst)
  ((afn (i lst)
     (if lst
       (if (is x (car lst)) i (self (+ i 1) (cdr lst)))))
   0 lst))

(def (complement f)
  (compose no f))

(<hl>write "boot.hl ends")
(<hl>writec (<hl>stdout) #\newline)
(<hl>flush (<hl>stdout))
