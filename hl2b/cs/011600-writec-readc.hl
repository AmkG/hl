(in-package impl)

(import <hl>def def)
(import <hl>defm defm)
(import <axiom>lambda fn)
(import <axiom>set =)
(import <axiom>if if)
(import <axiom>is is)
(import <axiom>rep rep)
(import <axiom>type type)
(import <hl>err err)
(import <hl>polymorph polymorph)
(import <axiom>i< <)
(import <axiom>i+ +)
(import <axiom>i- -)
(import <axiom>i* *)
(import <axiom>i/ /)
(import <axiom>imod mod)

(import <hl>base-each base-each)
(import <hl>base-collect base-collect)

(import <hl>readb    readb)
(import <hl>peekb    peekb)
(import <hl>unreadb  unreadb)
(import <hl>unreadmb unreadmb)
(import <hl>writeb   writeb)
(import <hl>writemb  writemb)
(import <hl>flush    flush)

(import <hl>readc    readc)
(import <hl>peekc    peekc)
(import <hl>unreadc  unreadc)
(import <hl>unreadmc unreadmc)
(import <hl>writec   writec)
(import <hl>writemc  writemc)

(import <hl>port port)

(def (readc p)
  (err '<hl>type "attempt to read character from non-port-like object"))
(def (peekc p)
  (err '<hl>type "attempt to peek character from non-port-like object:"))
(def (unreadc p b)
  (err '<hl>type "attempt to unread character from non-port-like object"))
(def (unreadmc p bs)
  (err '<hl>type "attempt to unread multiple characters from non-port-like object"))
(def (writec p b)
  (err '<hl>type "attempt to write character to non-port-like object"))
(def (writemc p bs)
  (err '<hl>type "attempt to write multiple characters to non-port-like object"))

(withs (extract-utf8
        (fn (p b)
          (if (< 127 b)
              (if (< b 192)
                  (- b 128)
                  ; unread byte then return malformedness
                  (do (unreadb p b)
                      nil))
              ; unread byte then return malformedness
              (do (unreadb p b)
                  nil)))
        check-char
        (polymorph
          (fn (c msg)
            (err '<hl>type msg))
          '(<hl>char)
          (fn (c msg)
            (if (is c (rep c))
                c
                (err '<hl>type msg))))
        read-utf8s ()
        readc-f ())
  (= read-utf8s
     (fn (p bytes sum)
       (if (is bytes 0)
           (<axiom>i-to-c sum)
           (let b (readb p)
             (if b
                 (let b (extract-utf8 p b)
                   (if b
                       (read-utf8s
                         p
                         (- bytes 1)
                         (+ (* sum 64) b))
                       ; malformed character
                       (readc-f p)))
                 nil)))))
  (= readc-f
     (fn (p)
       (let b0 (readb p)
         (if b0
             (if (< b0 128)
                 (<axiom>i-to-c b0)
                 (if (< 239 b0)
                     ; 4-byte char, 3 more bytes
                     (read-utf8s p 3 (- b0 240))
                     ; other number of bytes
                     (if (< 223 b0)
                         (read-utf8s p 2 (- b0 224))
                         (if (< 191 b0)
                             (read-utf8s p 1 (- b0 192))
                             ; malformed character
                             (readc-f p)))))
             ; eof
             nil))))
  (defm (readc (t p port))
    (let f (p 'readc)
      (if f (check-char (f) "contract violation on return value of readc - not a character")
            (readc-f p))))
  (defm (peekc (t p port))
    (let f (p 'peekc)
      (if f (check-char (f) "contract violation on return value of peekc - not a character")
            (let rv (readc p)
              (unreadc p rv)
              rv)))))


(withs (unchar
        (fn (c wrb)
          (let i (<axiom>c-to-i c)
            (if (< i 128)
                (wrb i)
                (if (< i 2048)
                    (do (wrb (+ 192 (/ i 64)))
                        (wrb (+ 128 (mod i 64))))
                    (if (< i 65536)
                        (do (wrb (+ 224 (/ i 4096)))
                            (wrb (+ 128 (mod (/ i 64) 64)))
                            (wrb (+ 128 (mod i 64))))
                        (if (< i 2097152)
                            (do (wrb (+ 240 (/ i 262144)))
                                (wrb (+ 128 (mod (/ i 4096) 64)))
                                (wrb (+ 128 (mod (/ i 64) 64)))
                                (wrb (+ 128 (mod i 64))))
                            nil))))))
        real-char-base
        (polymorph
          (fn (c wrong faked)
            (err '<hl>type wrong))
          '(<hl>char)
          (fn (c wrong faked)
            (if (is c (rep c))
                c
                (err '<hl>type faked))))
        real-char
        (fn (c) (real-char-base c "character writing to port expects character" "attempt to write fake character to port"))
        real-char-u
        (fn (c) (real-char-base c "character unreading from port expects character" "attempt to unread fake character from port")))
  ; write
  (defm (writec (t p port) c)
    (with (c (real-char c)
           f (p 'writec))
      (if f (f c)
            (unchar c (p 'writeb)))
      t))
  ; unread
  (defm (unreadc (t p port) c)
    (with (c (real-char-u c)
           f (p 'unreadc))
      (if f (f c)
            (let bs ()
              (unchar c (fn (b) (= bs (<axiom>cons b bs))))
              (base-each bs 0 (fn (b)
                (unreadb p b)))))))
  (let multi-algo
       (fn (p cs smc sc wrc real-char)
         (let f (p smc) ; 'writemc
           (if f (f (base-collect (fn (collect)
                      (base-each cs 0 (fn (c)
                        (collect (real-char c))
                        t)))))
                 (let f (p sc) ; 'writec
                   (if f (do (base-each cs 0 (fn (c)
                               (real-char c)
                               t))
                             (base-each cs 0 (fn (c)
                               (f c)
                               t)))
                         (do (base-each cs 0 (fn (c)
                               (real-char c)
                               t))
                             (base-each cs 0 (fn (c)
                               (wrc p c)
                               t))))))))
    (defm (writemc (t p port) cs)
      (multi-algo p cs 'writemc 'writec writec real-char))
    (defm (unreadmc (t p port) cs)
      (multi-algo p cs 'unreadmc 'unreadc unreadc real-char-u))))

#|
 |#

(let stdout (<hl>buffered-port-wrap (<axiom>i/o-stdout) "stdout")
  (writemc stdout "write characters - アラン\n")
  (flush stdout)
  (writemc
    (tag 'port
         (table 'writec (fn (c) (writec stdout c))))
    "アラン with writec defined ok\n")
  (flush stdout)
  (writemc
    (tag 'port
         (table 'writemc (fn (s) (writemc stdout s))))
    "アラン with writemc defined ok\n")
  (flush stdout)
  (let dummy-port
       (tag 'port
            (let hd ()
              (table
                'readb
                (fn ()
                  (let rv (<axiom>car hd)
                    (= hd (<axiom>cdr hd))
                    rv))
                'unreadb
                (fn (b)
                  (= hd (<axiom>cons b hd))))))
    (let loop ()
      (unreadmc dummy-port "\ncbaンラア")
      (= loop
         (fn ()
           (let c (readc dummy-port)
             (if c
                 (do (writec stdout c)
                     (loop))
                 nil))))
      (loop)))
  (flush stdout))

>stop-compiling
