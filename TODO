List of a few basic things to implement (it may change):

Macros are callable objects tagged with 'mac stored in global variables
Functions, continuations, tables, cons cells, strings are callable
Preferable if a call* global table/method function can be used to
extend/change functionality.


-- forms (in <axiom> package)

if
lambda -- no destructuring, just rest args
set
quote
tail-call -- *optional* tail-call checking
()-application

-- macros

quasiquote (unquote, splice)
fn -- destructuring, optional and rest args (expands to lambda)

-- functions

apply
err
cons
car 
cdr
is
+  -- on numbers, lists, strings
-
*
/
mod
expt
sqrt
> -- on numbers, strings
< -- on numbers, strings
len -- on lists, strings, tables
tag -- equivalent to Arc annotate
type
rep
uniq
ccc
infile
outfile
inside
close
stdout
stdin
stderr
call-w/stdin
call-w/stdout
readc
readb
peekc
writec
writeb
write
disp
read
coerce
open-socket 
socket-accept
new-thread
kill-thread
break-thread
sleep
system
pipe-from
table
maptable
protect
rand
dir
file-exists
dir-exists
rmfile
macex
macex1
eval
on-err
details
scar
scdr
sref -- on tables, strings, lists
bound
newstring
trunc
exact
msec
current-process-milliseconds
current-gc-milliseconds
seconds
client-ip
atomic-invoke -- unnecessary due to process separation
dead
ssyntax
ssexpand
quit

---- features

GC/automatic reaping for processes waiting for message but
  without references from other processes
GC for 'uniq-generated symbols

